<--NEW CODE-->
<--104420-->
def something(m):
    if not isinstance(m, list):
        m = list(m)
    yield m
    if len(m) == 1:
        return
    for n in sorted(m):
        y = m[:]
        p = y.index(n)
        del(y[p])
        y.insert(0, n)
        for x in something(y[1:]):
            if y[:1] + x <> m:
                yield y[:1] + x

<--NEW CODE-->
<--10554380-->
ip = "192.24.1.17"
InetAddress x = InetAddress.getByName(ip);
String h = x.getHostName();
System.out.println(h);

<--NEW CODE-->
<--89228-->
from subprocess import call
call(["hello world"])

<--NEW CODE-->
<--89228-->
call(["ls", "-l"])

<--NEW CODE-->
<--1207406-->
x[:] = [e for e in x if determine(e)]

<--NEW CODE-->
<--153724-->
public static double round(double v, int nd){
    double m = Math.pow(10, nd);
    double i = v * m;
    return Math.round(i) / m;
}

<--NEW CODE-->
<--13642748-->
BufferedInputStream x = new BufferedInputStream(new URL(url).openStream())
byte d[] = new byte[1024];

int c;
while((c = x.read(data,0,1024)) != -1){
    out.write(d, 0, c);
}

<--NEW CODE-->
<--2471209-->
WebClient c = new WebClient();
Stream s = c.OpenRead("http://blabla.com");
StreamReader r = new StreamReader(s);
String con = r.ReadToEnd();

<--NEW CODE-->
<--613183-->
import operator
sorted_dict = sorted(dict.iteritems(), key=operator.itemgetter(1))

<--NEW CODE-->
<--428918-->
DateTimeFormatter parser = ISODateTimeFormat.date();

DateTime date = parser.parseDateTime("1/1/1970");

String nd = parser.print(date.plusDays(1));
system.out.println(nd)

<--NEW CODE-->
<--2785485-->
import android.provider.Settings.Secure;
and = Secure.getString(getContext().getContentResolver(), Secure.ANDROID_ID);

<--NEW CODE-->
<--2601124-->
WifiManager w = (WifiManager) this.getSystemService(Context.WIFI_SERVICE);
WifiInfo wt = w.getConnectionInfo();
String m = wt.getMacAddress();
system.out.println(m)

<--NEW CODE-->
<--1296646-->
library(doBy)
s <- orderBy(~-z+b, data=s)

<--NEW CODE-->
<--311165-->
using System.Runtime.Remoting.Metadata.W3cXsd2001;
public byte[] method(string v){
    x = SoapHexBinary.Parse(v);
    return x.Value;
}
public string m(byte[] v){
    x = new SoapHexBinary(v);
    return x.ToString();
}

<--NEW CODE-->
<--1159277-->
var key, tmp_ar = {};
for ( key in trans ){
if ( trans.hasOwnProperty( key ) ){
    tmp_ar[trans[key]] = key; } }
return tmp_ar;

<--NEW CODE-->
<--1143196-->
d.click = check;
function some(e){
    var t = e ? e.target : window.event.srcElement;
    var obj = d.getElementById('calendar_widget');
    if (obj != 'null'){
        if (t.id != 'show_calender')
            obj.style.display='none';
    }
}

<--NEW CODE-->
<--1139048-->
s = new XmlWriterSettings();
s.Indent = false;
s.NewLineHandling = NewLineHandling.None;
using (XmlWriter w = XmlWriter.Create(CreateStream(), s)){
    _serializer.Serialize(o, w);
}

<--NEW CODE-->
<--505943-->
public string method(string uf){
    Unsubscribe = new List<string>(uf);
    Subscribe = new List<SubscriptionInfo>(subscribeTo);
    }

<--NEW CODE-->
<--1123576-->
SELECT
  COUNT(*) AS m_c
  FROM t
  WHERE gender='female';

SELECT
  height AS 'female 80% h'
  FROM t
  WHERE gender='female'
  ORDER BY height ASC
  LIMIT 1
  OFFSET n_c*8/10-1;

<--NEW CODE-->
<--563182-->
m.execute( "call get_lastpoll();" )
r=m.fetchone()[0]

<--NEW CODE-->
<--1159755-->
TextWriterTraceListener w = new TextWriterTraceListener(System.Console.Out);
Debug.Listeners.Add(w);
system.oit.println("hello!!!");

<--NEW CODE-->
<--294470-->
p = pwd.getpwnam(someString)
uid = p.pw_uid

<--NEW CODE-->
<--1126116-->
c=environ.copy()
c["foo"] = "bar"
subProcess.Popen("command_n_args", env=c)

<--NEW CODE-->
<--1138329-->
(void)setValue:(NSString*)nv{
if (v != nv){
    [v release];
    v = [nv copy]; } }

<--NEW CODE-->
<--677326-->
private void ppp(object s, KeyEventArgs m) {
    var g = (DataGrid)s;

    if ( Key.Delete == m.Key ) {

        foreach (var t in g.SelectedItems) {
            delete()

        }
    }
}

<--NEW CODE-->
<--not_in_db-->
with open("tags_file.csv", "rb") as reader:
    lines = reader.readlines()[1:]
ALL_TAGS = [a.split(",")[0].replace('"', "") for a in lines]
for tag in ALL_TAGS:
    print tag

<--NEW CODE-->
<--not_in_db-->
if int(question['Score']) < THRESHOLD_Q and filter_score:
        print q_id, "has score of", question['Score'], "and this is too low"
        return None
    tags = [e.replace(">","") for e in question['Tags'].split("<")[1:]]
    q_lang = ""
    for tag in tags:
        if tag in BLACK_LIST_TAGS and filter_score:
            print "unwanted tags is included"
            return None
        if tag in LANG_WORDS and q_lang == "":
            q_lang = tag

<--NEW CODE-->
<--not_in_db-->
 C2Q_EXP_DB.drop()
C2Q_EXP_DB.ensure_index("Id", unique=True)
posts_with_code = POSTS_DB.find({"answers.Body": {"$regex": "/.*<code>.*/"}}, timeout=False)
m = 0

<--NEW CODE-->
<--not_in_db-->
for num_q, q_id in enumerate(ids_to_look_for):
        all_possible_similarities = {}
        all_possible_difference = {}
        if CHECKED_DB.find({"Id": q_id}).count() > 0:
            continue
        relevant_q_id = []
        CHECKED_DB.insert({"Id": q_id})
        if CACHE_DB.find({"Id": q_id}).count() > 0:
            relevant_q_id = CACHE_DB.find({"Id": q_id})[0]["Ids"]

<--NEW CODE-->
<--not_in_db-->
 for i, code1 in enumerate(codes):
            for code2 in codes[i + 1:]:
                pairs += [(code1, code2, 1, q_id)]
        for code1 in codes:
            pairs += build_pairs(code1, all_possible_similarities)
            pairs += build_pairs(code1, all_possible_difference)
        id1 = q_id